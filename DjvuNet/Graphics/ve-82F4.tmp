using System;

namespace DjvuNet.Graphics
{
    /// <summary>
    /// This class represents 24 bit color image maps.
    /// </summary>
    public class GPixmap : GMap
    {
        #region Private Variables

        private GPixelReference ref_Renamed;

        #endregion Private Variables

        #region Protected Variables

        /// <summary>Used to represent division as multiplication. </summary>
        //UPGRADE_NOTE: Final was removed from the declaration of 'invmap '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
        protected internal static readonly int[] invmap = new int[256];

        /// <summary>Indentity color correction table. </summary>
        //UPGRADE_NOTE: Final was removed from the declaration of 'ctableI '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
        protected internal static readonly int[] ctableI = new int[256];

        /// <summary>Cached color correction table. </summary>
        protected internal static int[] ctable = new int[256];

        /// <summary> The color correction subsample for the cached color table. </summary>
        protected internal static double lgamma = -1D;

        /// <summary>Used to quickly clip out of bounds values. </summary>
        //UPGRADE_NOTE: Final was removed from the declaration of 'clip '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
        protected internal static readonly byte[] clip = new byte[512];

        /// <summary>Used for attenuation </summary>
        //UPGRADE_NOTE: Final was removed from the declaration of 'multiplierRefArray '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
        protected internal static readonly Object[] multiplierRefArray = new Object[256];

        #endregion Protected Variables

        #region Constructors

        static GPixmap()
        {
            {
                for (int i = 0; i < clip.Length; i++)
                {
                    clip[i] = (byte)((i < 256) ? i : 255);
                }
                for (int i = 1; i < invmap.Length; i++)
                {
                    invmap[i] = 0x10000 / i;
                }
                for (int i = 0; i < ctableI.Length; i++)
                {
                    ctableI[i] = i;
                }
                for (int i = 1; i < multiplierRefArray.Length; )
                {
                    multiplierRefArray[i++] = null;
                }
            }
        }

        /// <summary> Creates a new GPixmap object.</summary>
        public GPixmap()
            : base(3, 2, 1, 0, false)
        {
            InitBlock();
        }

        #endregion Constructors

        #region Public Methods

        /// <summary> Fill the array with color correction constants.
        ///
        /// </summary>
        /// <param name="gamma">color correction subsample
        ///
        /// </param>
        /// <returns> the new color correction table
        /// </returns>
        //UPGRADE_NOTE: Synchronized keyword was removed from method 'getColorCorrection'. Lock expression was added. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1027'"
        public static int[] getColorCorrection(double gamma)
        {
            lock (typeof(GPixmap))
            {
                if ((gamma < 0.10000000000000001D) || (gamma > 10D))
                {
                    throw new Exception("Illegal gamma: " + gamma);
                }

                int[] retval;
                if ((gamma < 1.0009999999999999D) && (gamma > 0.999D))
                {
                    retval = ctableI;
                }
                else
                {
                    if (gamma != lgamma)
                    {
                        ctable = new int[256];
                        for (int i = 0; i < 256; i++)
                        {
                            double x = i / 255D;

                            //if (DjVuOptions.BEZIERGAMMA)
                            {
                                double t = (Math.Sqrt(1.0D + (((gamma * gamma) - 1.0D) * x)) - 1.0D) / (gamma - 1.0D);
                                x = ((((1.0D - gamma) * t) + (2D * gamma)) * t) / (gamma + 1.0D);
                            }
                            //else
                            //{
                            //    x = System.Math.Pow(x, 1.0D / gamma);
                            //}

                            //UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'"
                            ctable[i] = (int)Math.Floor((255D * x) + 0.5D);
                        }
                        lgamma = gamma;
                    }
                    retval = ctable;
                }
                return retval;
            }
        }

        /// <summary> Attenuate the specified bitmap.
        ///
        /// </summary>
        /// <param name="bm">Bitmap to attenuate
        /// </param>
        /// <param name="xpos">horizontal position
        /// </param>
        /// <param name="ypos">vertical position
        /// </param>
        public virtual void attenuate(GBitmap bm, int xpos, int ypos)
        {
            // Check
            // Compute number of rows and columns
            int xrows = ypos + bm.rows();

            if (xrows > rows())
            {
                xrows = rows();
            }

            if (ypos > 0)
            {
                xrows -= ypos;
            }

            int xcolumns = xpos + bm.columns();

            if (xcolumns > columns())
            {
                xcolumns = columns();
            }

            if (xpos > 0)
            {
                xcolumns -= xpos;
            }

            if ((xrows <= 0) || (xcolumns <= 0))
            {
                return;
            }

            // Precompute multiplier map
            //UPGRADE_NOTE: Final was removed from the declaration of 'maxgray '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
            int maxgray = bm.getGrays() - 1;
            //UPGRADE_NOTE: Final was removed from the declaration of 'multiplier '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
            int[] multiplier = getMultiplier(maxgray);

            // Compute starting point
            int src = bm.rowOffset((ypos < 0) ? (-ypos) : 0) - ((xpos < 0) ? xpos : 0);
            int dst = rowOffset((ypos > 0) ? ypos : 0) + ((xpos > 0) ? xpos : 0);

            //UPGRADE_NOTE: Final was removed from the declaration of 'dstPixel '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
            GPixelReference dstPixel = createGPixelReference(0);

            // Loop over rows
            for (int y = 0; y < xrows; y++)
            {
                // Loop over columns
                dstPixel.setOffset(dst);

                for (int x = 0; x < xcolumns; dstPixel.incOffset())
                {
                    int srcpix = bm.getByteAt(src + (x++));

                    // Perform pixel operation
                    if (srcpix > 0)
                    {
                        if (srcpix >= maxgray)
                        {
                            dstPixel.setGray(0);
                        }
                        else
                        {
                            //UPGRADE_NOTE: Final was removed from the declaration of 'level '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                            int level = multiplier[srcpix];
                            dstPixel.setBGR((dstPixel.getBlue() * level) >> 16, (dstPixel.getGreen() * level) >> 16,
                                            (dstPixel.getRed() * level) >> 16);
                        }
                    }
                }

                // Next line
                dst += getRowSize();
                src += bm.getRowSize();
            }
        }

        /// <summary> Insert the specified bitmap with the specified color.
        ///
        /// </summary>
        /// <param name="bm">bitmap to insert
        /// </param>
        /// <param name="xpos">horizontal position
        /// </param>
        /// <param name="ypos">vertical position
        /// </param>
        /// <param name="color">color to insert bitmap with
        /// </param>
        public virtual void blit(GBitmap bm, int xpos, int ypos, GPixel color)
        {
            // Check
            if (color == null)
            {
                return;
            }

            // Compute number of rows and columns
            int xrows = ypos + bm.rows();

            if (xrows > rows())
            {
                xrows = rows();
            }

            if (ypos > 0)
            {
                xrows -= ypos;
            }

            int xcolumns = xpos + bm.columns();

            if (xcolumns > columns())
            {
                xcolumns = columns();
            }

            if (xpos > 0)
            {
                xcolumns -= xpos;
            }

            if ((xrows <= 0) || (xcolumns <= 0))
            {
                return;
            }

            // Precompute multiplier map
            //UPGRADE_NOTE: Final was removed from the declaration of 'maxgray '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
            int maxgray = bm.getGrays() - 1;
            //UPGRADE_NOTE: Final was removed from the declaration of 'multiplier '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
            int[] multiplier = new int[maxgray];

            for (int i = 0; i < maxgray; i++)
            {
                multiplier[i] = 0x10000 - ((i << 16) / maxgray);
            }

            // Cache target color
            int gr = color.getRed();
            int gg = color.getGreen();
            int gb = color.getBlue();

            // Compute starting point
            int src = bm.rowOffset((ypos < 0) ? (-ypos) : 0) - ((xpos < 0) ? xpos : 0);
            int dst = ((ypos > 0) ? rowOffset(ypos) : 0) + ((xpos > 0) ? xpos : 0);

            //UPGRADE_NOTE: Final was removed from the declaration of 'dstPixel '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
            GPixelReference dstPixel = createGPixelReference(dst);

            // Loop over rows
            for (int y = 0; y < xrows; y++)
            {
                // Loop over columns
                dstPixel.setOffset(dst);

                for (int x = 0; x < xcolumns; dstPixel.incOffset())
                {
                    //UPGRADE_NOTE: Final was removed from the declaration of 'srcpix '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int srcpix = bm.getByteAt(src + (x++));

                    // Perform pixel operation
                    if (srcpix != 0)
                    {
                        if (srcpix >= maxgray)
                        {
                            dstPixel.setBGR(gb, gg, gr);
                        }
                        else
                        {
                            //UPGRADE_NOTE: Final was removed from the declaration of 'level0 '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                            int level0 = multiplier[srcpix];
                            //UPGRADE_NOTE: Final was removed from the declaration of 'level1 '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                            int level1 = 0x10000 - level0;
                            dstPixel.setBGR(clip[((dstPixel.getBlue() * level0) + (gb * level1)) >> 16],
                                            clip[((dstPixel.getGreen() * level0) + (gg * level1)) >> 16],
                                            clip[((dstPixel.getRed() * level0) + (gr * level1)) >> 16]);
                        }
                    }
                }

                // Next line
                dst += getRowSize();
                src += bm.getRowSize();
            }
        }

        /// <summary> Correct the colors with a gamma subsample normalized to 1.0 for no correction.
        ///
        /// </summary>
        /// <param name="gamma">color correction
        /// </param>
        public void applyGammaCorrection(double gamma)
        {
            if (((gamma > 0.999D) && (gamma < 1.0009999999999999D)))
            {
                return;
            }

            int[] gtable = getColorCorrection(gamma);

            for (int i = 0; i < data.Length; i++)
            {
                data[i] = (byte)gtable[data[i]];
            }
        }

        /// <summary> Fill this image from another source at reduced resolution.  Pixel
        /// averaging will be used.
        ///
        /// </summary>
        /// <param name="src">image map to reduce
        /// </param>
        /// <param name="subsample">rate to subsample
        /// </param>
        /// <param name="pdr">target bounds
        /// </param>
        public virtual void downsample(GMap src, int subsample, GRect pdr)
        {
            GRect rect = new GRect(0, 0, ((src.columns() + subsample) - 1) / subsample,
                                   ((src.rows() + subsample) - 1) / subsample);

            if (pdr != null)
            {
                if ((pdr.xmin < rect.xmin) || (pdr.ymin < rect.ymin) || (pdr.xmax > rect.xmax) || (pdr.ymax > rect.ymax))
                {
                    throw new ArgumentException("(GPixmap::downsample) Specified rectangle overflows destination pixmap");
                }
                rect = pdr;
            }

            init(rect.height(), rect.width(), null);

            int sy = rect.ymin * subsample;
            int sxz = rect.xmin * subsample;
            int sidx = src.rowOffset(sy);
            int didx = 0;

            //UPGRADE_NOTE: Final was removed from the declaration of 'sptr '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
            GPixelReference sptr = src.createGPixelReference(0);
            //UPGRADE_NOTE: Final was removed from the declaration of 'dptr '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
            GPixelReference dptr = createGPixelReference(0);

            for (int y = 0; y < rows(); y++)
            {
                int sx = sxz;

                for (int x = columns(); x-- > 0; dptr.incOffset())
                {
                    int r = 0;
                    int g = 0;
                    int b = 0;
                    int s = 0;
                    int kidx = sidx;
                    int lsy = sy + subsample;

                    if (lsy > src.rows())
                    {
                        lsy = src.rows();
                    }

                    int lsx = sx + subsample;

                    if (lsx > src.columns())
                    {
                        lsx = src.columns();
                    }

                    for (int rsy = sy; rsy < lsy; rsy++)
                    {
                        sptr.setOffset(kidx + sx);
                        if (!RampNeeded)
                        {
                            for (int rsx = lsx - sx; rsx-- > 0; sptr.incOffset())
                            {
                                r += sptr.getRed();
                                g += sptr.getGreen();
                                b += sptr.getBlue();
                                s++;
                            }
                        }
                        else
                        {
                            for (int rsx = lsx - sx; rsx-- > 0; sptr.incOffset())
                            {
                                //UPGRADE_NOTE: Final was removed from the declaration of 'pix '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                                GPixel pix = src.ramp(sptr);
                                r += pix.getRed();
                                g += pix.getGreen();
                                b += pix.getBlue();
                                s++;
                            }
                        }

                        kidx += src.getRowSize();
                    }

                    if (s >= invmap.Length)
                    {
                        dptr.setBGR(b / s, g / s, r / s);
                    }
                    else
                    {
                        dptr.setBGR(((b * invmap[s]) + 32768) >> 16, ((g * invmap[s]) + 32768) >> 16,
                                    ((r * invmap[s]) + 32768) >> 16);
                    }

                    sx += subsample;
                }

                sy += subsample;
                sidx += src.rowOffset(subsample);
                dptr.setOffset(didx += getRowSize());
            }
        }

        /// <summary> Fill this image from another source at reduced resolution of 4 vertical
        /// pixels to 3.  An extrapulating pixel averaging algorithm is used.
        ///
        /// </summary>
        /// <param name="src">image map to reduce
        /// </param>
        /// <param name="pdr">target bounds
        ///
        /// </param>
        /// <throws>  IllegalArgumentException if the target rectangle is out of bounds </throws>
        public virtual void downsample43(GMap src, GRect pdr)
        {
            //UPGRADE_NOTE: Final was removed from the declaration of 'srcwidth '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
            int srcwidth = src.columns();
            //UPGRADE_NOTE: Final was removed from the declaration of 'srcheight '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
            int srcheight = src.rows();
            //UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'"
            int destwidth = (int)Math.Ceiling(srcwidth * 0.75D);
            //UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'"
            int destheight = (int)Math.Ceiling(srcheight * 0.75D);
            GRect rect = new GRect(0, 0, destwidth, destheight);

            if (pdr != null)
            {
                if ((pdr.xmin < rect.xmin) || (pdr.ymin < rect.ymin) || (pdr.xmax > rect.xmax) || (pdr.ymax > rect.ymax))
                {
                    throw new ArgumentException("rectangle out of bounds" + "pdr=(" + pdr.xmin + "," + pdr.ymin + "," +
                                                pdr.xmax + "," + pdr.ymax + "),rect=(" + rect.xmin + "," + rect.ymin +
                                                "," + rect.xmax + "," + rect.ymax + ")");
                }

                rect = pdr;
                destwidth = rect.width();
                destheight = rect.height();
            }

            init(destheight, destwidth, null);

            int sy = rect.ymin / 3;
            int dy = rect.ymin - (3 * sy);

            //    if(dy < 0)
            //    {
            //      sy--;
            //      dy += 3;
            //    }

            int sxz = rect.xmin / 3;
            int dxz = rect.xmin - (3 * sxz);

            if (dxz < 0)
            {
                sxz--;
                dxz += 3;
            }

            sxz *= 4;
            sy *= 4;

            //UPGRADE_NOTE: Final was removed from the declaration of 'spix0 '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
            GPixelReference spix0 = src.createGPixelReference(0);
            //UPGRADE_NOTE: Final was removed from the declaration of 'spix1 '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
            GPixelReference spix1 = src.createGPixelReference(0);
            //UPGRADE_NOTE: Final was removed from the declaration of 'spix2 '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
            GPixelReference spix2 = src.createGPixelReference(0);
            //UPGRADE_NOTE: Final was removed from the declaration of 'spix3 '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
            GPixelReference spix3 = src.createGPixelReference(0);
            //UPGRADE_NOTE: Final was removed from the declaration of 'dpix0 '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
            GPixelReference dpix0 = createGPixelReference(0);
            //UPGRADE_NOTE: Final was removed from the declaration of 'dpix1 '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
            GPixelReference dpix1 = createGPixelReference(0);
            //UPGRADE_NOTE: Final was removed from the declaration of 'dpix2 '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
            GPixelReference dpix2 = createGPixelReference(0);
            while (dy < destheight)
            {
                spix0.setOffset(sy++, sxz);

                if (sy >= srcheight)
                {
                    sy--;
                }

                spix1.setOffset(sy++, sxz);

                if (sy >= srcheight)
                {
                    sy--;
                }

                spix2.setOffset(sy++, sxz);

                if (sy >= srcheight)
                {
                    sy--;
                }

                spix3.setOffset(sy++, sxz);

                dpix0.setOffset((dy < 0) ? 0 : dy, dxz);

                if (++dy >= destheight)
                {
                    dy--;
                }

                dpix1.setOffset((dy < 0) ? 0 : dy, dxz);

                if (++dy >= destheight)
                {
                    dy--;
                }

                dpix2.setOffset(dy++, dxz);
                int dx = dxz;
                int sx = sxz;

                GPixel pix0 = src.ramp(spix0);
                GPixel pix1 = src.ramp(spix1);
                GPixel pix2 = src.ramp(spix2);
                GPixel pix3 = src.ramp(spix3);
                while (dx < destwidth)
                {
                    //UPGRADE_NOTE: Final was removed from the declaration of 's00b '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s00b = pix0.getBlue();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's00g '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s00g = pix0.getGreen();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's00r '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s00r = pix0.getRed();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's01b '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s01b = pix1.getBlue();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's01g '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s01g = pix1.getGreen();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's01r '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s01r = pix1.getRed();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's02b '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s02b = pix2.getBlue();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's02g '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s02g = pix2.getGreen();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's02r '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s02r = pix2.getRed();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's03b '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s03b = pix3.getBlue();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's03g '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s03g = pix3.getGreen();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's03r '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s03r = pix3.getRed();

                    if (++sx < srcwidth)
                    {
                        spix0.incOffset();
                        spix1.incOffset();
                        spix2.incOffset();
                        spix3.incOffset();
                        pix0 = src.ramp(spix0);
                        pix1 = src.ramp(spix1);
                        pix2 = src.ramp(spix2);
                        pix3 = src.ramp(spix3);
                    }

                    //UPGRADE_NOTE: Final was removed from the declaration of 's10b '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s10b = pix0.getBlue();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's10g '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s10g = pix0.getGreen();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's10r '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s10r = pix0.getRed();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's11b '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s11b = pix1.getBlue();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's11g '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s11g = pix1.getGreen();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's11r '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s11r = pix1.getRed();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's12b '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s12b = pix2.getBlue();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's12g '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s12g = pix2.getGreen();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's12r '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s12r = pix2.getRed();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's13b '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s13b = pix3.getBlue();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's13g '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s13g = pix3.getGreen();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's13r '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s13r = pix3.getRed();

                    if (++sx < srcwidth)
                    {
                        spix0.incOffset();
                        spix1.incOffset();
                        spix2.incOffset();
                        spix3.incOffset();
                        pix0 = src.ramp(spix0);
                        pix1 = src.ramp(spix1);
                        pix2 = src.ramp(spix2);
                        pix3 = src.ramp(spix3);
                    }

                    //UPGRADE_NOTE: Final was removed from the declaration of 's20b '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s20b = pix0.getBlue();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's20g '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s20g = pix0.getGreen();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's20r '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s20r = pix0.getRed();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's21b '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s21b = pix1.getBlue();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's21g '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s21g = pix1.getGreen();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's21r '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s21r = pix1.getRed();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's22b '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s22b = pix2.getBlue();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's22g '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s22g = pix2.getGreen();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's22r '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s22r = pix2.getRed();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's23b '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s23b = pix3.getBlue();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's23g '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s23g = pix3.getGreen();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's23r '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s23r = pix3.getRed();

                    if (++sx < srcwidth)
                    {
                        spix0.incOffset();
                        spix1.incOffset();
                        spix2.incOffset();
                        spix3.incOffset();
                        pix0 = src.ramp(spix0);
                        pix1 = src.ramp(spix1);
                        pix2 = src.ramp(spix2);
                        pix3 = src.ramp(spix3);
                    }

                    //UPGRADE_NOTE: Final was removed from the declaration of 's30b '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s30b = pix0.getBlue();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's30g '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s30g = pix0.getGreen();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's30r '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s30r = pix0.getRed();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's31b '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s31b = pix1.getBlue();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's31g '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s31g = pix1.getGreen();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's31r '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s31r = pix1.getRed();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's32b '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s32b = pix2.getBlue();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's32g '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s32g = pix2.getGreen();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's32r '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s32r = pix2.getRed();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's33b '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s33b = pix3.getBlue();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's33g '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s33g = pix3.getGreen();
                    //UPGRADE_NOTE: Final was removed from the declaration of 's33r '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    int s33r = pix3.getRed();

                    if (++sx < srcwidth)
                    {
                        spix0.incOffset();
                        spix1.incOffset();
                        spix2.incOffset();
                        spix3.incOffset();
                        pix0 = src.ramp(spix0);
                        pix1 = src.ramp(spix1);
                        pix2 = src.ramp(spix2);
                        pix3 = src.ramp(spix3);
                    }

                    dpix0.setBlue(((11 * s00b) + (2 * (s01b + s10b)) + s11b + 8) >> 4);
                    dpix0.setGreen(((11 * s00g) + (2 * (s01g + s10g)) + s11g + 8) >> 4);
                    dpix0.setRed(((11 * s00r) + (2 * (s01r + s10r)) + s11r + 8) >> 4);
                    dpix1.setBlue(((7 * (s01b + s02b)) + s11b + s12b + 8) >> 4);
                    dpix1.setGreen(((7 * (s01g + s02g)) + s11g + s12g + 8) >> 4);
                    dpix1.setRed(((7 * (s01r + s02r)) + s11r + s12r + 8) >> 4);
                    dpix2.setBlue(((11 * s03b) + (2 * (s02b + s13b)) + s12b + 8) >> 4);
                    dpix2.setGreen(((11 * s03g) + (2 * (s02g + s13g)) + s12g + 8) >> 4);
                    dpix2.setRed(((11 * s03r) + (2 * (s02r + s13r)) + s12r + 8) >> 4);

                    if (++dx < destwidth)
                    {
                        dpix0.incOffset();
                        dpix1.incOffset();
                        dpix2.incOffset();
                    }

                    dpix0.setBlue(((7 * (s10b + s20b)) + s11b + s21b + 8) >> 4);
                    dpix0.setGreen(((7 * (s10g + s20g)) + s11g + s21g + 8) >> 4);
                    dpix0.setRed(((7 * (s10r + s20r)) + s11r + s21r + 8) >> 4);
                    dpix1.setBlue((s12b + s22b + s11b + s21b + 2) >> 2);
                    dpix1.setGreen((s12g + s22g + s11g + s21g + 2) >> 2);
                    dpix1.setRed((s12r + s22r + s11r + s21r + 2) >> 2);
                    dpix2.setBlue(((7 * (s13b + s23b)) + s12b + s22b + 8) >> 4);
                    dpix2.setGreen(((7 * (s13g + s23g)) + s12g + s22g + 8) >> 4);
                    dpix2.setRed(((7 * (s13r + s23r)) + s12r + s22r + 8) >> 4);

                    if (++dx < destwidth)
                    {
                        dpix0.incOffset();
                        dpix1.incOffset();
                        dpix2.incOffset();
                    }

                    dpix0.setBlue(((11 * s30b) + (2 * (s31b + s20b)) + s21b + 8) >> 4);
                    dpix0.setGreen(((11 * s30g) + (2 * (s31g + s20g)) + s21g + 8) >> 4);
                    dpix0.setRed(((11 * s30r) + (2 * (s31r + s20r)) + s21r + 8) >> 4);
                    dpix1.setBlue(((7 * (s31b + s32b)) + s21b + s22b + 8) >> 4);
                    dpix1.setGreen(((7 * (s31g + s32g)) + s21g + s22g + 8) >> 4);
                    dpix1.setRed(((7 * (s31r + s32r)) + s21r + s22r + 8) >> 4);
                    dpix2.setBlue(((11 * s33b) + (2 * (s32b + s23b)) + s22b + 8) >> 4);
                    dpix2.setGreen(((11 * s33g) + (2 * (s32g + s23g)) + s22g + 8) >> 4);
                    dpix2.setRed(((11 * s33r) + (2 * (s32r + s23r)) + s22r + 8) >> 4);

                    if (++dx < destwidth)
                    {
                        dpix0.incOffset();
                        dpix1.incOffset();
                        dpix2.incOffset();
                    }
                }
            }
        }

        /// <summary> Insert the reference map at the specified location.
        ///
        /// </summary>
        /// <param name="ref">map to insert
        /// </param>
        /// <param name="dx">horizontal position to insert at
        /// </param>
        /// <param name="dy">vertical position to insert at
        /// </param>
        public override void fill(GMap ref_Renamed, int dx, int dy)
        {
            //UPGRADE_NOTE: Final was removed from the declaration of 'x0 '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
            int x0 = (dx > 0) ? dx : 0;
            int y0 = (dy > 0) ? dy : 0;
            //UPGRADE_NOTE: Final was removed from the declaration of 'x1 '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
            int x1 = (dx < 0) ? (-dx) : 0;
            int y1 = (dy < 0) ? (-dy) : 0;
            //UPGRADE_NOTE: Final was removed from the declaration of 'w0 '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
            int w0 = columns() - x0;
            //UPGRADE_NOTE: Final was removed from the declaration of 'w1 '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
            int w1 = ref_Renamed.columns() - x1;
            //UPGRADE_NOTE: Final was removed from the declaration of 'w '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
            int w = (w0 < w1) ? w0 : w1;
            //UPGRADE_NOTE: Final was removed from the declaration of 'h0 '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
            int h0 = rows() - y0;
            //UPGRADE_NOTE: Final was removed from the declaration of 'h1 '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
            int h1 = ref_Renamed.rows() - y1;
            int h = (h0 < h1) ? h0 : h1;

            if ((w > 0) && (h > 0))
            {
                //UPGRADE_NOTE: Final was removed from the declaration of 'pixel '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                GPixelReference pixel = createGPixelReference(0);
                //UPGRADE_NOTE: Final was removed from the declaration of 'refPixel '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                GPixelReference refPixel = ref_Renamed.createGPixelReference(0);

                do
                {
                    pixel.setOffset(y0++, x0);
                    refPixel.setOffset(y1++, x1);

                    if (!RampNeeded)
                    {
                        pixel.setPixels(refPixel, w);
                    }
                    else
                    {
                        int i = w;
                        do
                        {
                            pixel.set_Renamed(ref_Renamed.ramp(refPixel));
                            pixel.incOffset();
                            refPixel.incOffset();
                        } while (--i > 0);
                    }
                } while (--h > 0);
            }
        }

        /// <summary> Initialize this pixmap to the specified size and fill in the specified color.
        ///
        /// </summary>
        /// <param name="arows">number of rows
        /// </param>
        /// <param name="acolumns">number of columns
        /// </param>
        /// <param name="filler">fill color
        ///
        /// </param>
        /// <returns> the initialized pixmap
        /// </returns>
        public virtual GPixmap init(int arows, int acolumns, GPixel filler)
        {
            //    boolean needFill=false;
            if ((arows != nrows) || (acolumns != ncolumns))
            {
                data = null;
                nrows = arows;
                ncolumns = acolumns;
            }

            //UPGRADE_NOTE: Final was removed from the declaration of 'npix '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
            int npix = rowOffset(rows());

            if (npix > 0)
            {
                if (data == null)
                {
                    data = new byte[npix * 3];
                    //        needFill=true;
                }

                if (filler != null)
                {
                    //UPGRADE_NOTE: Final was removed from the declaration of 'b '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    byte b = filler.blueByte();
                    //UPGRADE_NOTE: Final was removed from the declaration of 'g '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    byte g = filler.greenByte();
                    //UPGRADE_NOTE: Final was removed from the declaration of 'r '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                    byte r = filler.redByte();

                    for (int i = 0; i < data.Length; )
                    {
                        data[i++] = b;
                        data[i++] = g;
                        data[i++] = r;
                    }
                }
                //      else if(needFill)
                //      {
                //        for(int i = 0; i < data.length;)
                //        {
                //          data[i++] = -51;
                //        }
                //      }
            }

            return this;
        }

        /// <summary> Initialize this pixmap from a segment of another image map.
        ///
        /// </summary>
        /// <param name="ref">image map to initialize from
        /// </param>
        /// <param name="rect">bounding rectangle to initialize from
        ///
        /// </param>
        /// <returns> the initialized pixmap
        /// </returns>
        public virtual GPixmap init(GMap ref_Renamed, GRect rect)
        {
            init(rect.height(), rect.width(), ((null)));

            //UPGRADE_NOTE: Final was removed from the declaration of 'rect2 '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
            GRect rect2 = new GRect(0, 0, ref_Renamed.columns(), ref_Renamed.rows());
            rect2.intersect(rect2, rect);
            rect2.translate(-rect.xmin, -rect.ymin);

            if (!rect2.Empty)
            {
                //UPGRADE_NOTE: Final was removed from the declaration of 'pixel '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                GPixelReference pixel = createGPixelReference(0);
                //UPGRADE_NOTE: Final was removed from the declaration of 'refPixel '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                GPixelReference refPixel = ref_Renamed.createGPixelReference(0);

                for (int y = rect2.ymin; y < rect2.ymax; y++)
                {
                    pixel.setOffset(y, rect2.xmin);
                    refPixel.setOffset(y + rect.ymin, rect.xmin + rect2.xmin);

                    if (!RampNeeded)
                    {
                        for (int x = rect2.xmax - rect2.xmin; x-- > 0; pixel.incOffset(), refPixel.incOffset())
                        {
                            pixel.set_Renamed(refPixel);
                        }
                    }
                    else
                    {
                        for (int x = rect2.xmax - rect2.xmin; x-- > 0; pixel.incOffset(), refPixel.incOffset())
                        {
                            pixel.set_Renamed(ref_Renamed.ramp(refPixel));
                        }
                    }
                }
            }

            return this;
        }

        /// <summary> Initialize this pixmap from another image map.
        ///
        /// </summary>
        /// <param name="ref">image map to initialize from
        ///
        /// </param>
        /// <returns> the initialized pixmap
        /// </returns>
        public virtual GPixmap init(GMap ref_Renamed)
        {
            init(ref_Renamed.rows(), ref_Renamed.columns(), ((null)));

            //UPGRADE_NOTE: Final was removed from the declaration of 'pixel '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
            GPixelReference pixel = createGPixelReference(0);

            if ((rows() > 0) && (columns() > 0))
            {
                //UPGRADE_NOTE: Final was removed from the declaration of 'refPixel '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
                GPixelReference refPixel = (ref_Renamed).createGPixelReference(0);

                for (int y = 0; y < rows(); y++)
                {
                    pixel.setOffset(y, 0);
                    refPixel.setOffset(y, 0);

                    if (!RampNeeded)
                    {
                        for (int x = columns(); x-- > 0; pixel.incOffset(), refPixel.incOffset())
                        {
                            pixel.set_Renamed(refPixel);
                        }
                    }
                    else
                    {
                        for (int x = columns(); x-- > 0; pixel.incOffset(), refPixel.incOffset())
                        {
                            pixel.set_Renamed(ref_Renamed.ramp(refPixel));
                        }
                    }
                }
            }

            return this;
        }

        /// <summary> Draw the foreground layer onto this background image.
        ///
        /// </summary>
        /// <param name="mask">the mask layer
        /// </param>
        /// <param name="foregroundMap">the foreground colors
        /// </param>
        /// <param name="supersample">rate to upsample the foreground colors
        /// </param>
        /// <param name="subsample">rate to subsample the foreground colors
        /// </param>
        /// <param name="bounds">the target rectangle
        /// </param>
        /// <param name="gamma">color correction factor
        ///
        /// </param>
        /// <throws>  IllegalArgumentException if the specified bounds are not contained in the page </throws>
        public virtual void stencil(GBitmap mask, GPixmap foregroundMap, int supersample, int subsample, GRect bounds,
                                    double gamma)
        {
            // Check arguments
            GRect rect = new GRect(0, 0, (foregroundMap.columns() * supersample + subsample - 1) / subsample,
                                   (foregroundMap.rows() * supersample + subsample - 1) / subsample);

            if (bounds != null)
            {
                if ((bounds.xmin < rect.xmin) || (bounds.ymin < rect.ymin) || (bounds.xmax > rect.xmax) ||
                    (bounds.ymax > rect.ymax))
                {
                    throw new ArgumentException("rectangle out of bounds" + "bounds=(" + bounds.xmin + "," + bounds.ymin +
                                                "," + bounds.xmax + "," + bounds.ymax + "),rect=(" + rect.xmin + "," +
                                                rect.ymin + "," + rect.xmax + "," + rect.ymax + ")");
                }

                rect = bounds;
            }

            // Compute number of rows
            int xrows = rows();

            if (mask.rows() < xrows)
            {
                xrows = mask.rows();
            }

            if (rect.height() < xrows)
            {
                xrows = rect.height();
            }

            // Compute number of columns
            int xcolumns = columns();

            if (mask.columns() < xcolumns)
            {
                xcolumns = mask.columns();
            }

            if (rect.width() < xcolumns)
            {
                xcolumns = rect.width();
            }

            // Precompute multiplier map
            int maxgray = mask.getGrays() - 1;
            int[] multiplier = new int[maxgray];

            for (int i = 1; i < maxgray; i++)
            {
                multiplier[i] = (0x10000 * i) / maxgray;
            }

            // Prepare color correction table
            int[] gtable = getColorCorrection(gamma);

            double ratioFg = supersample / (double)subsample;
            // Compute starting point in blown up foreground pixmap
            int fgy = (rect.ymin * subsample) / supersample;
            double fgy1 = rect.ymin - ratioFg * fgy;

            if (fgy1 < 0)
            {
                fgy--;
                fgy1 += ratioFg;
            }

            int fgxz = (rect.xmin * subsample) / supersample;
            double fgx1z = rect.xmin - ratioFg * fgxz;

            if (fgx1z < 0)
            {
                fgxz--;
                fgx1z += ratioFg;
            }

            int fg = foregroundMap.rowOffset(fgy);
            GPixelReference fgx = foregroundMap.createGPixelReference(0);
            GPixelReference dst = createGPixelReference(0);

            // Loop over rows
            for (int y = 0; y < xrows; y++)
            {
                // Loop over columns
                fgx.setOffset(fg + fgxz);

                double fgx1 = fgx1z;
                dst.setOffset(y, 0);

                int src = mask.rowOffset(y);

                for (int x = 0; x < xcolumns; x++, dst.incOffset())
                {
                    int srcpix = mask.getByteAt(src + x);

                    // Perform pixel operation
                    if (srcpix > 0)
                    {
                        if (srcpix >= maxgray)
                        {
                            dst.setBGR(gtable[fgx.getBlue()], gtable[fgx.getGreen()], gtable[fgx.getRed()]);
                        }
                        else
                        {
                            int level = multiplier[srcpix];
                            dst.setBGR(((dst.getBlue() * (0x10000 - level)) + (level * gtable[fgx.getBlue()])) >> 16,
                                       ((dst.getGreen() * (0x10000 - level)) + (level * gtable[fgx.getGreen()])) >> 16,
                                       ((dst.getRed() * (0x10000 - level)) + (level * gtable[fgx.getRed()])) >> 16);
                        }
                    }

                    // Next column
                    if (++fgx1 >= ratioFg)
                    {
                        fgx1 -= ratioFg;
                        fgx.incOffset();
                    }
                }

                // Next line
                if (++fgy1 >= ratioFg)
                {
                    fgy1 -= ratioFg;
                    fg += foregroundMap.getRowSize();
                }
            }
        }

        /// <summary> Copy this image with a translated origin.
        ///
        /// </summary>
        /// <param name="dx">horizontal distance to translate
        /// </param>
        /// <param name="dy">vertical distance to translate
        /// </param>
        /// <param name="retval">an old image to try and reuse for the return value
        ///
        /// </param>
        /// <returns> the translated image
        /// </returns>
        public override GMap translate(int dx, int dy, GMap retval)
        {
            if (!(retval is GPixmap) || (retval.columns() != columns()) || (retval.rows() != rows()))
            {
                retval = new GPixmap().init(rows(), columns(), null);
            }

            retval.fill(this, -dx, -dy);

            return retval;
        }

        #endregion Public Methods

        #region Internal Methods

        /// <summary> Initiallize this pixmap with a preallocated buffer.
        ///
        /// </summary>
        /// <param name="data">buffer to use
        /// </param>
        /// <param name="arows">number of rows
        /// </param>
        /// <param name="acolumns">number of columns
        ///
        /// </param>
        /// <returns> the initialized pixmap
        /// </returns>
        internal virtual GPixmap init(byte[] data, int arows, int acolumns)
        {
            nrows = arows;
            ncolumns = acolumns;
            this.data = data;

            return this;
        }

        #endregion Internal Methods

        #region Protected Methods

        /// <summary> Creates or retrieves a cached multiplier array to use when attenuating.
        ///
        /// </summary>
        /// <returns> attenuation array
        /// </returns>
        protected internal static int[] getMultiplier(int maxgray)
        {
            int[] retval = (int[])multiplierRefArray[maxgray];
            if (retval == null)
            {
                retval = new int[maxgray];

                for (int i = 0; i < maxgray; i++)
                {
                    retval[i] = 0x10000 - ((i << 16) / maxgray);
                }
                multiplierRefArray[maxgray] = retval;
            }
            return retval;
        }

        #endregion Protected Methods

        #region Private Methods

        private void InitBlock()
        {
            ref_Renamed = createGPixelReference(-1);
        }

        #endregion Private Methods
    }
}